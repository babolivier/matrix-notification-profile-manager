package matrix

import (
	"errors"
	"net/http"

	"github.com/babolivier/matrix-notification-profile-manager/types"

	"github.com/matrix-org/gomatrix"
)

const ACCOUNT_DATA_TYPE = "bzh.abolivier.profiles.push"

var (
	ErrProfileExists    = errors.New("A profile already exists with this name, use another name or the -overwrite flag to overwrite it")
	ErrProfileNotExists = errors.New("No profile exists with this name")
)

func GetPushRules(cli *gomatrix.Client) (rules types.PushRules, err error) {
	url := cli.BuildURL("pushrules/")
	_, err = cli.MakeRequest("GET", url, nil, &rules)
	return
}

func AddPushRule(cli *gomatrix.Client, rule types.PushRule) error {
	url := cli.BuildURL("pushrules", rule.Scope, rule.Kind, rule.RuleID)
	_, err := cli.MakeRequest("PUT", url, rule, nil)
	return err
}

func DeletePushRule(cli *gomatrix.Client, rule types.PushRule) error {
	url := cli.BuildURL("pushrules", rule.Scope, rule.Kind, rule.RuleID)
	_, err := cli.MakeRequest("DELETE", url, nil, nil)
	return err
}

func GetProfiles(cli *gomatrix.Client) (profiles map[string]types.PushRules, err error) {
	url := cli.BuildURL("user", cli.UserID, "account_data", ACCOUNT_DATA_TYPE)
	_, err = cli.MakeRequest("GET", url, nil, &profiles)
	return
}

func SaveProfile(cli *gomatrix.Client, name string, profile types.PushRules, overwrite bool) error {
	profiles, err := GetProfiles(cli)
	if err != nil {
		// If the error is an HTTP error generated by gomatrix not receiving a
		// 200 back, continue with an empty profile list - it likely means
		// there's no profile set yet.
		httpErr, ok := err.(gomatrix.HTTPError)
		if !ok || httpErr.Code == http.StatusNotFound {
			return err
		}

		profiles = make(map[string]types.PushRules)
	}

	if _, ok := profiles[name]; ok && !overwrite {
		return ErrProfileExists
	}

	profiles[name] = profile

	return saveProfiles(cli, profiles)
}

func DeleteProfile(cli *gomatrix.Client, name string) error {
	profiles, err := GetProfiles(cli)
	if err != nil {
		return err
	}

	if _, ok := profiles[name]; !ok {
		return ErrProfileNotExists
	}

	delete(profiles, name)

	return saveProfiles(cli, profiles)
}

func saveProfiles(cli *gomatrix.Client, profiles map[string]types.PushRules) error {
	url := cli.BuildURL("user", cli.UserID, "account_data", ACCOUNT_DATA_TYPE)
	_, err := cli.MakeRequest("PUT", url, profiles, nil)
	return err
}
